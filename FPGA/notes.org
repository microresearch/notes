* Lattice iCE40-HX8K breakout board

* doppler board

- installation of tools following again: https://github.com/nesl/ice40_examples/ on x220 now
- follow installation for arduino at: https://github.com/dadamachines/arduino-board-index

we are running: Downloads/arduino-1.8.5/arduino

- general guide is here:

https://github.com/dadamachines/doppler/

- examples/firmware:

https://github.com/dadamachines/doppler-FPGA-firmware

// so for making the FPGA bitstream we use makefiles 

and then we upload code with bitstream via. arduino - it defaults to
doppler_simple_io_bin (this is in ICEClass.h) which is specified as an array in:
doppler_simple_io.h

or we can specify eg: 

 #include "[PATHTO]/top.bin.h" // set up the path to doppler_simple_io or custom firmware
  ICEClass ice40;   // subclass ICEClass to implement custom spi protocol
   
  void setup() {
    ice40.upload(top_bin,sizeof(top_bin)); // Upload BitStream Firmware to FPGA -> see variant.h

// tested this process

make in FPGA source files, upload in arduino with path to .h with binary

: export PATH=/usr/local/avr/bin:$PATH

// pins/connections/code

* verilog

- how we connect things with pcf file
- how we instantiate submodules

where are our examples on x200:

- open-fpga-verilog-tutorial
- ice40_examples

* resources

"Digital Design, An Embedded Systems Approach Using Verilog"

https://github.com/nesl/ice40_examples/ - examples and installing tools

https://github.com/Obijuan/open-fpga-verilog-tutorial/wiki/Home_EN - tutorial we use

** misc

https://github.com/mcmayer/iCE40

https://stuartl.longlandclan.id.au/blog/2015/12/06/fpga-fun/

https://github.com/sjlongland/icestick/tree/ice40-hx8k

https://github.com/SubProto/icestick-vga-test

http://hedmen.org/icestorm-doc/icestorm.html

** pwm

https://github.com/ZipCPU/wbpwmaudio

https://hackaday.io/project/162557-fpga-dabbling

** flip/flop//SR

https://reference.digilentinc.com/learn/programmable-logic/tutorials/use-flip-flops-to-build-a-clock-divider/start 

https://www.rs-online.com/designspark/a-gentle-introduction-to-fpga-programming

http://www.bitweenie.com/listings/verilog-shift-register/

++  https://github.com/Obijuan/open-fpga-verilog-tutorial/wiki/Chapter-10:-shift-register

https://esrd2014.blogspot.com/p/d-flip-flop.html

** random/noise also SR

https://casper.ssl.berkeley.edu/wiki/Variable_Correlation_Digital_Noise_Source_for_FPGA

https://github.com/frisnit/fpga-noise/blob/master/verilog/noise_generator.v

http://liu.diva-portal.org/smash/get/diva2:305133/FULLTEXT01.pdf

https://electronics.stackexchange.com/questions/263656/hardware-sources-of-entropy-on-an-fpga/274873

https://github.com/alexforencich/verilog-mersenne/blob/master/rtl/axis_mt19937.v

https://electronics.stackexchange.com/questions/30521/random-bit-sequence-using-verilog

https://stackoverflow.com/questions/43136082/random-0-1-1-in-verilog/43137525#43137525


** verilog

http://www.asic-world.com/verilog/veritut.html

https://people.ece.cornell.edu/land/courses/ece5760/FinalProjects/s2016/avh34_sz296/ece5760_Final_Project_avh34_sz296/ece5760_Final_Project_avh34_sz296/ece5760.Final.Project.Report/ece5760.Final.Project.Report.html

and code at: https://people.ece.cornell.edu/land/courses/ece5760/FinalProjects/s2016/avh34_sz296/ece5760_Final_Project_avh34_sz296/ece5760_Final_Project_avh34_sz296/ece5760.Final.Project.Report/code/nes_apu.zip

** tools?

http://www.clifford.at/icestorm/ 

https://wiki.debian.org/FPGA/Lattice - full outline and links

https://github.com/abnoname/iceZ0mb1e

* TODO:

- toolchain and basic example, upload

The pipeline employs the following tools:

    yosys - for logic synthesis of Verilog code. The output is a
    netlist describing how all cells are connected together in BLIF
    format.

    arachne-pnr - for placement and routing of the netlist. The output
    is a textual bitstream.

The final step, i.e. preparing the bitstream for the FPGA, and
transferring it to the FPGA, uses:

    fpga-icestorm - for the Lattice boards, using libusb/libftdi


DONE following https://github.com/nesl/ice40_examples/ on x200

- how to connect to I/O, clocking internal and clocking from outside!

pinmap.pcf -- the pin map file relating variable names referenced in
top.v to physical I/O pins on the ICE40 HX8K. The syntax here is
set_io <wire_name> <physical pin name>.

we look at ice40breakout.pdf to see pins!

- simple shift register with all ins and outs

//working now in  /root/open-fpga-verilog-tutorial/tutorial/ICESTICK/T10-shif-register

shifted to testcode here!

- changed makefile and pcf for our module and works!
- make burn to run iceprog

- TODO: shift register example with real-world connections, doppler workflow and tests

- what chip we can use for our own work?

** dadamachines doppler

- about the board 

- code and guide at: https://github.com/dadamachines/doppler/

FPGA stuff at: https://github.com/dadamachines/doppler-FPGA-firmware

- development and toolchain: did we use docker thing (check on x200 and make notes)?

** ///

- how we can make functionality of All Colours in FPGA and what speeds this could run at?

- pulses in, out, XORs, random leaks, noise entry, timings(we have), PWM, DACs

- all is 1.2v so we need to convert = but is mixed 3.3v CMOS pins, anyways will translate pulses with transistors

practicalities of how to interface with it?

- how to do simulation
- how to maybe implement ouroboric/SR mutated functionality
- ouroboric instruction CPU with all instructions spilled and leaked to outside

